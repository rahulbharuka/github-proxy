// Code generated by mockery v1.0.0. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommentRepo is an autogenerated mock type for the CommentRepo type
type MockCommentRepo struct {
	mock.Mock
}

// ListAll provides a mock function with given fields: ctx, org
func (_m *MockCommentRepo) ListAll(ctx context.Context, org string) ([]Comment, error) {
	ret := _m.Called(ctx, org)

	var r0 []Comment
	if rf, ok := ret.Get(0).(func(context.Context, string) []Comment); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).([]Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, c
func (_m *MockCommentRepo) Save(ctx context.Context, c *Comment) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Comment) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAll provides a mock function with given fields: ctx, org
func (_m *MockCommentRepo) DeleteAll(ctx context.Context, org string) error {
	ret := _m.Called(ctx, org)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
