// Code generated by mockery v1.0.0. DO NOT EDIT.

package github

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// IsMember provides a mock function with given fields: ctx, org, user
func (_m *MockHandler) IsMember(ctx context.Context, org string, user string) (bool, error) {
	ret := _m.Called(ctx, org, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, org, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, org, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidOrg provides a mock function with given fields: ctx, org
func (_m *MockHandler) IsValidOrg(ctx context.Context, org string) (bool, error) {
	ret := _m.Called(ctx, org)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllMembers provides a mock function with given fields: ctx, org
func (_m *MockHandler) ListAllMembers(ctx context.Context, org string) ([]*User, error) {
	ret := _m.Called(ctx, org)

	var r0 []*User
	if rf, ok := ret.Get(0).(func(context.Context, string) []*User); ok {
		r0 = rf(ctx, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
